#+STARTUP: overview
#+STARTUP: indent
* Eriks keys minor mode
[[https://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs/5340797][Source from stackoverflow]]
#+begin_src emacs-lisp :tangle yes
  ;;(defvar my-keys-minor-mode-map
  ;;  (let ((map (make-sparse-keymap)))

  ;;    map)
  ;;  "my-keys-minor-mode keymap.")

  (setq my-keys-map (make-sparse-keymap)) ;;varför gör jag såhär?

  (define-minor-mode my-keys-minor-mode
    "my keymode to activate my keybindings"
    :global t
    :init-value t
    :lighter " my-keys"
    :keymap my-keys-map)

  ;; (define-globalized-minor-mode my-keys-global-mode
  ;;   my-keys-minor-mode
  ;;   (lambda ()
  ;;     (my-keys-minor-mode 1)))

  (my-keys-minor-mode 1)
  ;;(my-keys-global-mode 1)

  (global-set-key (kbd "<f1>") 'my-keys-minor-mode)

  ;;-----turn off i minibuffer------
  ;;(defun my-minibuffer-setup-hook ()
  ;;  (my-keys-minor-mode 0))

  ;;(add-hook 'minibuffer-setup-hook 'my-minibuffer-setup-hook)

  ;;-----reloada om en minor mode kommer in-----
  (add-hook 'after-load-functions 'my-keys-have-priority)

  (defun my-keys-have-priority (_file)
    "Try to ensure that my keybindings retain priority over other minor modes. Called via the `after-load-functions' special hook."
    (unless (eq (caar minor-mode-map-alist) 'my-keys-minor-mode)
      (let ((mykeys (assq 'my-keys-minor-mode minor-mode-map-alist)))
        (assq-delete-all 'my-keys-minor-mode minor-mode-map-alist)
        (add-to-list 'minor-mode-map-alist mykeys))))
#+end_src
** locally override
If you want to "always use the keybinds in the map, unless I explicitly
override them for a specific mode-map", and assuming you are using
scottfrazier's approach, you want:

So
#+begin_src emacs-lisp :tangle yes
(defun locally-override (key cmd)
    (unless (local-variable-p 'my-keys-minor-mode-map)
      (set (make-variable-buffer-local 'my-keys-minor-mode-map)
           (make-sparse-keymap))
      (set-keymap-parent my-keys-minor-mode-map
                         (default-value 'my-keys-minor-mode-map)))
    (define-key my-keys-minor-mode-map key cmd))
#+end_src
(locally-override "\C-i" nil)

should remove the "\C-i" binding from the minor mode in the current buffer only.
Warning: this is completely untested, but seems like the right approach.
The point of setting the parent rather than just coping the global value of
my-keys-minor-mode-map is so any later changes to the global value are automatically
reflected in the local value.
* misc
#+begin_src emacs-lisp :tangle yes
  (browse-kill-ring-default-keybindings)
  ;; (powerline-default-theme)

  (require 'all-the-icons)
  ;; (require 'all-the-icons-ivy)
  ;; (all-the-icons-ivy-setup)
  (all-the-icons-dired-mode)

  (require 'smart-mode-line)
  (sml/setup)

  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (which-key-mode 1)
  ;;(setq org-ellipsis "⬎")
  ;;(smart-mode-line-enable)
  (setq inhibit-startup-screen t)
  ;; (setq auto-save-file-name-transforms
  ;;       (let (dir (expand-file-name "~/.emacs_auto_saves"))
  ;;         `((".*" dir t))))
                                          ; auto save path
  (defvar autosave-dir (concat "~/.emacs_auto_saves" "/"))
  (make-directory autosave-dir t)
  (setq auto-save-file-name-transforms
        `(("\\(?:[^/]*/\\)*\\(.*\\)" ,(concat autosave-dir "\\1") t)))

  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

  (winner-mode 1)

  (global-disable-mouse-mode)

  (define-key my-keys-map (kbd "C-+") 'er/expand-region)
  (global-set-key (kbd "M-s r") 'isearch-query-replace-regexp)
  (global-set-key (kbd "M-s s") 'isearch-forward-regexp)
  (global-set-key (kbd "M-s S") 'isearch-backward-regexp)

  (global-auto-revert-mode t)

  (define-key input-decode-map [?\C-i] [C-i])
  ;;(global-set-key (kbd "<C-i>") 'indent-region)
  (define-key input-decode-map [?\C-m] [C-m])
  ;;(global-set-key (kbd "<C-i>") 'indent-region)

  (defun replace-char (c)
    "Replaces current char with a prompted one"
    (interactive "cReplacement: ")
    (delete-char 1)
    (insert-char c)
    (backward-char)
    )

  (define-key my-keys-map (kbd "C-r") 'replace-char)

  ;;support för font awesome
  ;; (set-fontset-font "fontset-default" '(#xf000 . #xffff) "Font Awesome")

  (defun backward-symbol (&optional arg)
   "Move backward until encountering the beginning of a symbol.
  With argument, do this that many times."
   (interactive "p")
   (forward-symbol (- (or arg 1))))

  (define-key my-keys-map (kbd "<f3>") 'kmacro-start-macro)

#+end_src
* Eriks map / prefix key
** random
#+begin_src emacs-lisp :tangle yes
  (define-prefix-command 'eriks-map)
  ;;(global-set-key (kbd "C-ö") 'eriks-map)
  (define-key my-keys-map (kbd "C-SPC") 'eriks-map)
  (define-key my-keys-map (kbd "<C-m>") 'set-mark-command)

  (defun eriks-kill-line ()
    "Kills (cuts) the whole current line"
    (interactive)
    (setq col (current-column))
    (beginning-of-line)
    (delete-horizontal-space)
    (set-mark-command nil)
    (end-of-line)
    (if (not (eq (point) (mark)))
        (kill-region (point) (mark)))
    (deactivate-mark)
    ;;(kill-line 1)
    (delete-forward-char 1)
    (move-to-column col))

  (define-key eriks-map (kbd "d") 'eriks-kill-line)

  (defun eriks-add-semicolon ()
    "Goes to the end of the current line and adds an semicolon."
    (interactive)
    (move-end-of-line nil)
    (insert ";"))

  (defun eriks-add-semicolon-and-newline ()
    "what the name says"
    (interactive)
    (eriks-add-semicolon)
    (newline-without-break-down))


  (define-key eriks-map (kbd ":") 'eriks-add-semicolon)
  (define-key eriks-map (kbd ";") 'eriks-add-semicolon-and-newline)

  (defun eriks-insert-paren (p)
    (interactive "p")
    (end-of-line)
    (insert p)
    (left-char)
    (newline)
    (newline)
    (indent-for-tab-command)
    (forward-line -1)
    (indent-for-tab-command)
    )

  ;; (define-key eriks-map (kbd "{") ;;TODO flytta till c-map
  ;;   (lambda ()
  ;;     (interactive)
  ;;     (eriks-insert-paren "{}")))

  (define-key eriks-map (kbd "t") 'ansi-term)

  (define-key eriks-map (kbd "c") 'whitespace-cleanup)

  ;; (defun edit-myinit-org ()
  ;;   (interactive)
  ;;   (find-file (expand-file-name "~/.emacs.d/myinit.org")))

  ;;(define-key eriks-map (kbd "i") 'edit-myinit-org)

  (define-key eriks-map (kbd "g") 'magit-status)
  (define-key eriks-map (kbd "u") 'counsel-unicode-char)


#+end_src
* M-f, M-b, M-n, M-p
#+begin_src emacs-lisp :tangle yes
  (defun lxor (a b)
    "logical xor"
    (and
     (not (and a b))
     (or a b)))

  (defun lxnor (a b)
    "logical xnor"
    (not (lxor a b)))

  (defun is-boundary (char)
    "Checks whether char is a space, newline or tab"
    (or
     (= char 32) ;;space
     (= char 10) ;;newline
     (= char 9)  ;; tab
     ;;(bolp)
     ;;(eolp)
     ))

  (defun erik-backward-word ()
    "Move between space separated tokens backwards"
    (interactive)
    (let ((w (is-boundary (preceding-char))))
      (while (lxnor w (is-boundary (preceding-char)))
        (backward-char))
      )
    )

  (defun erik-forward-word ()
    "Move between space separated tokens forwards"
    (interactive)
    (let ((w (is-boundary (following-char))))
      (while (lxnor w (is-boundary (following-char)))
        (forward-char))
      )
    )

  ;;(define-key my-keys-map (kbd "M-f") 'erik-forward-word)
  ;;(define-key my-keys-map (kbd "M-b") 'erik-backward-word)

  ;; experimental versions. skips quotes
  ;; (defun erik-backward-word ()
  ;;   "Move between space separated tokens backwards. Jumps over strings (weird behaviour if started inside a string)"
  ;;   (interactive)
  ;;   (let ((w (is-boundary (preceding-char)))
  ;;         (inQuotes nil)
  ;;         (prevQuote nil))
  ;;     (while (or
  ;;             inQuotes
  ;;             (lxnor w (is-boundary (preceding-char))))
  ;;       (if (and prevQuote (= 92 (preceding-char))) ;; \
  ;;           (setq inQuotes (not inQuotes)))
  ;;       (if (= 34 (preceding-char)) ;;" double quotes
  ;;           (progn
  ;;             (setq inQuotes (not inQuotes))
  ;;             (setq prevQuote t))
  ;;         (setq prevQuote nil))
  ;;       (backward-char))
  ;;     )
  ;;   (if (bobp)
  ;;       (message "Maybe unbalanced '\"', started inside string or just end of buffer"))
  ;;   )

  ;; (defun erik-forward-word ()
  ;;   "Move between space separated tokens forwards. Jumps over strings (weird behaviour if started inside a string)"
  ;;   (interactive)
  ;;   (let ((w (is-boundary (following-char)))
  ;;         (inQuotes nil)
  ;;         (esc nil))
  ;;     (while (or
  ;;             inQuotes
  ;;             (lxnor w (is-boundary (following-char))))
  ;;       (if (and (not esc) (= 34 (following-char))) ;;" double quotes
  ;;           (setq inQuotes (not inQuotes)))
  ;;       (if (= 92 (following-char)) ;; \
  ;;           (setq esc t)
  ;;         (setq esc nil))
  ;;       (forward-char))
  ;;     )
  ;;   (if (eobp)
  ;;       (message "Maybe unbalanced '\"', started inside string or just end of buffer"))
  ;;   )

  (define-key my-keys-map (kbd "M-p")
    (lambda ()
      (interactive)
      (previous-line 3)))

  (define-key my-keys-map (kbd "M-n")
    (lambda ()
      (interactive)
      (next-line 3)))
#+end_src
* yasnippet
#+begin_src emacs-lisp :tangle yes
  ;;(require 'yasnippet)
  (yas-global-mode 1)
  ;;(require 'dropdown-list)
  ;;(setq yas-prompt-functions
  ;;      '(yas-dropdown-prompt
  ;;        yas-ido-prompt
  ;;        yas-x-prompt
  ;;        yas-completing-prompt
  ;;        yas-no-prompt))

  ;;removes expanding with tab. Uses 'Auto-complete' instead
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)

#+end_src
* Auto-complete
All default keybindings have been commented out in the source file 'auto-complete.el'

#+begin_src emacs-lisp :tangle yes
  (global-auto-complete-mode 1)
  (ac-config-default)

  (setq ac-dwim nil)

  (add-hook 'auto-complete-mode-hook
            (lambda ()
              ;;(define-key ac-completing-map (kbd "up") nil)
              ;;(define-key ac-completing-map (kbd "down") nil)
              ;;(define-key ac-completing-map (kbd "TAB") 'ac-next)
              (define-key ac-completing-map (kbd "<tab>") 'ac-expand)
              (define-key ac-completing-map (kbd "<backtab>") 'ac-expand-previous)
              (define-key ac-completing-map (kbd "C-o") 'ac-complete)
              ;;(define-key ac-menu-map (kbd "C-o") 'ac-complete)
              (define-key ac-completing-map (kbd "RET") 'ac-stop)
              (define-key ac-completing-map (kbd "C-n") 'ac-next)
              (define-key ac-completing-map (kbd "C-p") 'ac-previous)
              ))

  ;;adds yasnippet snippets to menu
  ;; (eval-after-load "auto-complete"
  ;;   '(add 'ac-sources 'ac-source-yasnippet))
  (eval-after-load "auto-complete"
    (lambda ()
      (add-to-list 'ac-sources 'ac-source-yasnippet)))

  ;;makes a key bring up the popup menu again if auto-complete is enabled
  ;;otherwise, try to expand with yas
  ;;(define-key ac-mode-map)
  (define-key my-keys-map (kbd "S-SPC")
        (lambda ()
          (interactive)
          (if (bound-and-true-p auto-complete-mode)
              (progn
                (ac-trigger-key-command 1)
                (message "auto-complete"))
            (progn
              (yas-expand)
              (message "yasnippet")))))


#+end_src
* undo-tree
#+begin_src emacs-lisp :tangle yes
  (global-undo-tree-mode 1)
  (global-set-key (kbd "C-z") 'undo)
  ;;(define-key my-keys-map (kbd "C-z") 'undo)
  (global-set-key (kbd "C-S-z") 'undo-tree-redo)
  ;;(define-key my-keys-map (kbd "C-S-z") 'undo-tree-redo)
  (define-key eriks-map (kbd "u") 'undo-tree-visualize)
#+end_src
* ivy and avy
#+begin_src emacs-lisp :tangle yes
  ;;ivy
  (ivy-mode 1)
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  ;;(define-key ivy-minibuffer-map (kbd "<tab>") 'ivy-partial)

  ;;avy
  ;;(define-prefix-command 'eriks-avy-map)
  ;;(define-key my-keys-map (kbd "M-s") 'eriks-avy-map)
  ;;(global-set-key (kbd "M-s") 'avy-goto-char)
  (define-key eriks-map (kbd "SPC") 'avy-goto-char)
  (define-key eriks-map (kbd "C-SPC") 'avy-goto-char-2)

  ;;dired
  ;;(add-hook 'dired-mode-hook
  ;;          (lambda ()
  ;;            (define-key dired-mode-map (kbd "M-s s") 'avy-goto-char)))
  (setq ivy-use-selectable-prompt t)
#+end_src
* window manipulation
#+begin_src emacs-lisp :tangle yes
  ;; (define-key my-keys-map (kbd "S-C-<left>") 'shrink-window-horizontally)
  ;; (define-key my-keys-map (kbd "S-C-<right>") 'enlarge-window-horizontally)
  ;; (define-key my-keys-map (kbd "S-C-<down>") 'shrink-window)
  ;; (define-key my-keys-map (kbd "S-C-<up>") 'enlarge-window)

  ;; (define-key my-keys-map (kbd "C-<right>") 'tabbar-forward-tab)
  ;; (define-key my-keys-map (kbd "C-<left>") 'tabbar-backward-tab)
  ;; (define-key my-keys-map (kbd "C-<up>") 'tabbar-forward-group)
  ;; (define-key my-keys-map (kbd "C-<down>") 'tabbar-backward-group)

  ;; ;;(windmove-default-keybindings)

  (define-key my-keys-map (kbd "S-<right>") 'windmove-right)
  (define-key my-keys-map (kbd "S-<left>") 'windmove-left)
  (define-key my-keys-map (kbd "S-<up>") 'windmove-up)
  (define-key my-keys-map (kbd "S-<down>") 'windmove-down)
#+end_src
* o and O from VIM
#+begin_src emacs-lisp :tangle yes
  (setq newline-without-break-tab nil)

  (defun newline-without-break-down ()
    "Add new line below and go to it. tab if an argument is given"
    (interactive)
    (end-of-line)
    (newline)
    (if newline-without-break-tab (indent-for-tab-command)))

  (defun newline-without-break-up ()
    "Add new line above and go to it. tab if an argument is given"
    (interactive)
    (beginning-of-line)
    (newline)
    (forward-line -1)
    (if newline-without-break-tab (indent-for-tab-command)))

  ;;(define-key cua-global-keymap [C-return] nil) ;;ta bort C-return from cua
  (define-key my-keys-map (kbd "<C-return>") 'newline-without-break-down)
  (define-key my-keys-map (kbd "<C-S-return>") 'newline-without-break-up)

#+end_src
* prog-mode-hook
** prog-mode
#+begin_src emacs-lisp :tangle yes
  (add-hook 'prog-mode-hook
            (lambda ()
              (make-local-variable 'newline-without-break-tab)
              (setq newline-without-break-tab t)
              ;;(autopair-mode 1)
              ;;(paredit-mode t)
              (start-smartparens)
              (setq show-trailing-whitespace t)
              (rainbow-delimiters-mode t)
              (modalka-mode 1)))
#+end_src
** C-mode hook
#+begin_src emacs-lisp :tangle yes
  (add-hook 'c-mode-common-hook
            (lambda ()
              (flycheck-mode 1)
              (run-hooks 'abbrev-mode-hook) ;;för att den inte verkar göra det själv

              ;;(add-to-list 'ac-sources 'ac-source-c-headers)
              ;;(add-to-list 'ac-sources 'ac-source-c-header-symbols t)
              ;; (define-key c-mode-base-map (kbd "<C-S-return>")
              ;;   (lambda ()
              ;;     (interactive)
              ;;     (newline-without-break-up t)))

              ;; (define-key c-mode-base-map (kbd "<C-return>")
              ;;   (lambda ()
              ;;     (interactive)
              ;;     (newline-without-break-down t)))

              ;;(electric-pair-mode 1)
              ;;(make-local-variable 'newline-without-break-tab)
              ;;(setq newline-without-break-tab t)
              ;;(autopair-mode)
              ;;(setq show-trailing-whitespace t)
              ))
#+end_src
** lisp hook
#+begin_src emacs-lisp :tangle yes
  (add-hook 'emacs-lisp-mode-hook
            (lambda ()
              (smartparens-strict-mode t)
              ;;(make-local-variable 'newline-without-break-tab)
              ;;(setq newline-without-break-tab t)
              ;;(autopair-mode)
              ;;(setq show-trailing-whitespace t)
              ))

#+end_src
** perl hook
#+begin_src emacs-lisp :tangle yes
  (add-hook 'perl-mode-hook
            (lambda ()
              ;; (define-key perl-mode-map (kbd "<C-S-return>")
              ;;   (lambda ()
              ;;     (interactive)
              ;;     (newline-without-break-up t)))

              ;; (define-key perl-mode-map (kbd "<C-return>")
              ;;   (lambda ()
              ;;     (interactive)
              ;;     (newline-without-break-down t)))

              ;; (electric-pair-mode 1)
              ))
#+end_src
** java hook
*** eclim
#+begin_src emacs-lisp :tangle yes
  (require 'eclim)
  (setq eclimd-autostart nil)

  (custom-set-variables
   '(eclim-eclipse-dirs '("~/bin/eclipse-neon"))
   '(eclim-executable "~/bin/eclipse-neon/eclim"))

  ;;(setq help-at-pt-display-when-idle t)
  ;;(setq help-at-pt-timer-delay 0.1)
  ;;(help-at-pt-set-timer)

  (add-hook 'eclim-mode-hook
            (lambda ()
              (define-key eclim-mode-map (kbd "C-c C-e C-b") 'eclim-project-build)
              (define-key eclim-mode-map (kbd "C-c C-e d") nil)
              (define-key eclim-mode-map (kbd "C-c C-e d d") 'eclim-java-show-documentation-for-current-element)
              (define-key eclim-mode-map (kbd "C-c C-e d f") 'eclim-java-browse-documentation-at-point)
              (define-key eclim-mode-map (kbd "C-c C-e d s") 'eclim-java-doc-comment)
              ))

  (add-hook 'java-mode-hook
            (lambda ()
              (flycheck-mode -1)
              (start-eclim-if-inside-eclipse-workspace)))

  (defun eclim-java-start ()
    (interactive)
    (eclim-mode t)
    (require 'ac-emacs-eclim)
    ;;(ac-emacs-eclim-config)
    (ac-emacs-eclim-java-setup)
    )

  (defun start-eclim-if-inside-eclipse-workspace ()
    (if (null (search "workspace" (buffer-file-name)))
        ()
      (eclim-java-start)))


#+end_src
*** non-eclim
#+begin_src emacs-lisp :tangle yes

#+end_src
* move lines from internet
#+begin_src emacs-lisp :tangle yes
  ;; (defun move-line (n)
  ;;   "Move the current line up or down by N lines. Buggar for second last line i buffern"
  ;;   (interactive "p")
  ;;   (setq col (current-column))
  ;;   (beginning-of-line)
  ;;   (setq start (point))
  ;;   (end-of-line)
  ;;   (if (eobp)
  ;;       (newline)
  ;;     (forward-char))
  ;;   (setq end (point))
  ;;   (let ((line-text (delete-and-extract-region start end)))
  ;;     (forward-line n)
  ;;     (if (eobp) (newline))
  ;;     (insert line-text)
  ;;     ;; restore point to original column in moved line
  ;;     (forward-line -1)
  ;;     (move-to-column col)))

  ;; (defun move-line-up (n)
  ;;   "Move the current line up by N lines."
  ;;   (interactive "p")
  ;;   (move-line (if (null n) -1 (- n))))

  ;; (defun move-line-down (n)
  ;;   "Move the current line down by N lines."
  ;;   (interactive "p")
  ;;   (move-line (if (null n) 1 n)))

  (defun move-line-up ()
    (interactive)
    (let ((col (current-column)))
      (transpose-lines 1)
      (previous-line 2)
      (move-to-column col)))

  (defun move-line-down ()
    (interactive)
    (let ((col (current-column)))
      (next-line 1)
      (transpose-lines 1)
      (previous-line 1)
      (move-to-column col)))

  (define-key my-keys-map (kbd "M-<up>") 'move-line-up)
  (define-key my-keys-map (kbd "M-<down>") 'move-line-down)

#+end_src
* golden ratio scroll
#+begin_src emacs-lisp :tangle yes
  (global-set-key [remap scroll-down-command] 'golden-ratio-scroll-screen-down)
  (global-set-key [remap scroll-up-command] 'golden-ratio-scroll-screen-up)
#+end_src
* projectile
#+begin_src emacs-lisp :tangle yes
  (projectile-global-mode t)
  (counsel-projectile-on)
#+end_src
* dumb jump
#+begin_src emacs-lisp :tangle yes
  ;;(dumb-jump-mode)

  ;;(fset 'eriks-dumb-jump-keymap (make-sparse-keymap))
  (define-prefix-command 'eriks-dumb-jump-keymap)
  (define-key eriks-map (kbd "j") 'eriks-dumb-jump-keymap)

  (define-key 'eriks-dumb-jump-keymap (kbd "j") 'dumb-jump-go)
  (define-key 'eriks-dumb-jump-keymap (kbd "b") 'dumb-jump-back)

  (setq dumb-jump-selector 'ivy)

#+end_src
* neotree
#+begin_src emacs-lisp :tangle yes
  ;;When running ‘projectile-switch-project’ (C-c p p), ‘neotree’ will change root automatically.
  ;;(setq projectile-switch-project-action 'neotree-projectile-action)

  ;;Every time when the neotree window is opened, let it find current file and jump to node.
  ;;(setq neo-smart-open t)

  ;;Similar to find-file-in-project, NeoTree can be opened (toggled) at projectile project root as follows:
  (defun neotree-project-dir ()
    "Open NeoTree using the git root."
    (interactive)
    (let ((project-dir (projectile-project-root))
          (file-name (buffer-file-name)))
      (neotree-toggle)
      (if project-dir
          (if (neo-global--window-exists-p)
              (progn
                (neotree-dir project-dir)
                (neotree-find file-name)))
        (message "Could not find git project root."))))

  ;; (global-set-key [f8] 'neotree-toggle)
  ;; (global-set-key (kbd "S-<f8>") 'neotree-find)
  ;; (global-set-key [f9] 'neotree-project-dir)

  (defhydra hydra-neotree (:color blue)
    "neotree"
    ("<f8>" neotree-toggle "toggle")
    ("f" neotree-find "file dir")
    ("p" neotree-project-dir "project dir"))
  (define-key my-keys-map (kbd "<f8>") 'hydra-neotree/body)
#+end_src
* multiple cursors
#+begin_src emacs-lisp :tangle yes
  ;; (define-key 'eriks-map (kbd "m l") 'mc/edit-lines)
  ;; (define-key 'eriks-map (kbd "m m") 'mc/mark-next-like-this)
  ;; (define-key 'eriks-map (kbd "m n") 'mc/mark-previous-like-this)
  ;; (define-key 'eriks-map (kbd "m b") 'mc/mark-all-like-this)
#+end_src
* Hydra
** various hydras
#+begin_src emacs-lisp :tangle yes
  ;; font zoom
  (defhydra hydra-zoom ()
    "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out")
    ("q" nil "quit" :color blue))
  (define-key eriks-map (kbd "z") 'hydra-zoom/body)

  (defhydra hydra-windows (:hint nil)
    "
   ^Resize^         ^Transpose^    ^Buffer/tabbar^       ^^^^   ^Split^
  -----------------------------------------------------------------------------------
    ^Horizontal^        ^_W_^           ^_w_^                   [_3_] : horizontal
   [_o_] : shrink     _A_   _D_       _a_   _d_                 [_2_] : vertical
   [_p_] : enlarge      ^_S_^           ^_s_^                   [_0_] : close
    ^ ^                                               ^^^^^^^^  [_1_] : close other
    ^Vertical^         ^^          [_b_] : switch buffer  ^^^^  [_+_] : balance
   [_u_] : shrink      ^^          [_k_] : kill           ^^^^  [_4_] : kill and close
   [_i_] : enlarge     ^^          [_f_] : find file        ^ ^
   ^ ^                 ^^          [_x_] : run command
   [arrows] : switch window   Winner :: [_z_], [_Z_]
   _q_uit
  "
    ("<left>" windmove-left nil)
    ("<right>" windmove-right nil)
    ("<up>" windmove-up nil)
    ("<down>" windmove-down nil)
    ("o" shrink-window-horizontally nil)
    ("p" enlarge-window-horizontally nil)
    ("u" shrink-window nil)
    ("i" enlarge-window nil)
    ("W" buf-move-up nil)
    ("S" buf-move-down nil)
    ("A" buf-move-left nil)
    ("D" buf-move-right nil)
    ("d" tabbar-forward-tab nil)
    ("a" tabbar-backward-tab nil)
    ("w" tabbar-forward-group nil)
    ("s" tabbar-backward-group nil)
    ("b" ivy-switch-buffer nil)
    ("k" kill-this-buffer nil)
    ("3" split-window-horizontally nil)
    ("2" split-window-vertically nil)
    ("0" delete-window nil)
    ("1" delete-other-windows nil)
    ("+" balance-windows nil)
    ("4" kill-buffer-and-window nil)
    ("x" execute-extended-command nil)
    ("f" counsel-find-file nil)
    ("z" winner-undo nil)
    ("Z" winner-redo nil)
    ("q" nil nil :color blue))
  (define-key 'eriks-map (kbd "w") 'hydra-windows/body)


  (defhydra hydra-multiple-cursors ()
    "
       ^Up^            ^Down^        ^Other^
  ----------------------------------------------
  [_p_]   Next    [_n_]   Next    [_l_] Edit lines
  [_P_]   Skip    [_N_]   Skip    [_a_] Mark all
  [_M-p_] Unmark  [_M-n_] Unmark  [_r_] Mark by regexp
  ^ ^             ^ ^             [_q_] Quit
  "
    ("l" mc/edit-lines nil :exit t)
    ("a" mc/mark-all-like-this nil :exit t)
    ("n" mc/mark-next-like-this nil)
    ("N" mc/skip-to-next-like-this nil)
    ("M-n" mc/unmark-next-like-this nil)
    ("p" mc/mark-previous-like-this nil)
    ("P" mc/skip-to-previous-like-this nil)
    ("M-p" mc/unmark-previous-like-this nil)
    ("r" mc/mark-all-in-region-regexp nil :exit t)
    ("q" nil nil))
  (define-key 'eriks-map (kbd "m") 'hydra-multiple-cursors/body)


#+end_src
** transpose
#+begin_src emacs-lisp :tangle yes
  (defun eriks-transpose-char-forward ()
    (interactive)
    (forward-char)
    (transpose-chars 1)
    (forward-char -1))

  (defun eriks-transpose-char-backward ()
    (interactive)
    (transpose-chars 1)
    (forward-char -2))

  (defun eriks-transpose-word-forward ()
    (interactive)
    (transpose-words 1))

  (defun eriks-transpose-word-backward ()
    (interactive)
    (transpose-words -1)
    (backward-word))

  (defhydra hydra-transpose ()
    "Transpose: "
    ("k" move-line-up "line up")
    ("j" move-line-down "line down")
    ("h" eriks-transpose-char-backward "char backward")
    ("l" eriks-transpose-char-forward "char forward")
    ("f" eriks-transpose-word-forward "word forward")
    ("b" eriks-transpose-word-backward "word backward")
    ("q" nil "quit"))


#+end_src
** org-table to hydra
*** macro definition
#+begin_src emacs-lisp :tangle yes
  (fset 'org-table-to-hydra-docstring
     (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([134217788 134217843 115 92 40 32 43 92 41 92 40 46 42 63 92 41 92 40 32 42 124 92 41 13 134217788 67108896 5 134217843 114 92 49 94 92 50 94 92 51 13 33 134217788 134217843 115 124 92 40 32 92 123 50 44 92 125 92 41 13 134217788 134217843 114 124 94 94 92 49 13 33 134217788 134217843 115 92 40 95 46 42 63 95 92 41 13 134217843 114 91 92 49 93 13 33 134217788 3 3 134217843 115 124 13 134217843 114 13 33 134217788 14 deletechar deletechar 94 94 134217843 115 45 92 43 45 13 134217843 114 94 94 13 33 134217788] 0 "%d")) arg)))

#+end_src

*** example
| head1      | head2      | head3            | head4      |
|------------+------------+------------------+------------|
| _h_ : grej | _g_ : sasd | _<right>_ : hej! | _a_ : asd! |
|            |            | _F_       : :)   |            |

==> formated as raw string

 ^head1^       ^head2^       ^head3^             ^head4^
^^-----------^^------------^^------------------^^-------------
 [_h_] : grej  [_g_] : sasd  [_<right>_] : hej!  [_a_] : asd!
 ^^            ^^            [_F_]       : :)    ^^

==> end result in hydra

 head1       head2       head3             head4
------------------------------------------------------
 [h] : grej  [g] : sasd  [<right>] : hej!  [a] : asd!
                         [F]       : :)
* paredit
#+begin_src emacs-lisp :tangle yes
  ;; (define-key paredit-mode-map (kbd "C-S-<left>") 'paredit-backward-slurp-sexp)
  ;; (define-key paredit-mode-map (kbd "C-S-<right>") 'paredit-backward-barf-sexp)
#+end_src
* smartparens
** standard config
#+begin_src emacs-lisp :tangle yes
  (require 'smartparens-config)

  (defun start-smartparens ()
    (smartparens-mode t)

    (define-key smartparens-mode-map (kbd "C-M-SPC") 'sp-mark-sexp)

    (define-key smartparens-mode-map (kbd "C-M-n") 'sp-next-sexp)
    (define-key smartparens-mode-map (kbd "C-M-p") 'sp-previous-sexp)

    (define-key smartparens-mode-map (kbd "C-M-u") 'sp-backward-up-sexp)
    (define-key smartparens-mode-map (kbd "C-M-d") 'sp-down-sexp)

    (define-key smartparens-mode-map (kbd "C-M-f") 'sp-forward-sexp)
    (define-key smartparens-mode-map (kbd "C-M-b") 'sp-backward-sexp)
    
    (define-key smartparens-mode-map (kbd "C-M-k") 'sp-kill-sexp)

    ;;(define-key smartparens-mode-map (kbd "M-f") 'sp-forward-symbol)
    ;;(define-key smartparens-mode-map (kbd "M-b") 'sp-backward-symbol)
    
    )

  (defun start-hydra-smartparens-if-activated ()
    (interactive)
    (if (bound-and-true-p smartparens-mode)
        (hydra-smartparens/body)
      (message "smartparens not activated!")))

  (define-key eriks-map (kbd "p") 'hydra-smartparens/body) ;;'start-hydra-smartparens-if-activated

  (defhydra hydra-smartparens (:color blue)
    "
   ^forward^      ^backward^     ^Sexp^          ^Hybrid^
  ^^^^^^^^-----------------------------------------------------
   [_m_] : barf   [_i_] : slurp  [_K_] : kill    [_k_] : kill
   [_n_] : slurp  [_o_] : barf   [_s_] : splice  [_w_] : slurp
    ^ ^            ^ ^           [_S_] : split   [_e_] : barf
    ^ ^            ^ ^           [_J_] : join     ^ ^
  "
    ("K" sp-kill-sexp nil)
    ("s" sp-splice-sexp nil)
    ("S" sp-split-sexp nil)
    ("J" sp-join-sexp nil)
    ("m" sp-forward-barf-sexp nil)
    ("n" sp-forward-slurp-sexp nil)
    ("i" sp-backward-slurp-sexp nil)
    ("o" sp-backward-barf-sexp nil)
    ("k" sp-kill-hybrid-sexp nil)
    ("w" sp-slurp-hybrid-sexp nil)
    ("e" sp-dedent-adjust-sexp nil)
    )
  ;;("q" nil "Quit" :color blue)

#+end_src
** parenthesis
#+begin_src emacs-lisp :tangle yes
  (defun my-create-newline-and-enter-sexp (&rest _ignored)
    "Open a new brace or bracket expression, with relevant newlines and indent. "
    (newline)
    (indent-according-to-mode)
    (forward-line -1)
    (indent-according-to-mode))


  (sp-local-pair '(c-mode java-mode) "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
  ;;(sp-local-pair 'java-mode "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))

#+end_src
* rectangles
#+begin_src emacs-lisp :tangle yes
  (require 'picture)

  (defun pic-move (x y)
    "Uses picture-mode movement commands"
    ;;(interactive "P\nP")
    (cond
     ((> x 0) (picture-forward-column x))
     ((< x 0) (picture-backward-column (- x))))
    (cond
     ((> y 0) (picture-move-down y))
     ((< y 0) (picture-move-up (- y)))))

  ;; (defun mark-column ()
  ;;   (exchange-point-and-mark)
  ;;   (let ((col (current-column)))
  ;;     (exchange-point-and-mark)
  ;;     col))

  ;; (defun put-point-top-left-corner ()
  ;;   (line-number-at-pos (point))
  ;;   (let )
  ;;   (if (> (point) (mark))
  ;;       (exchange-point-and-mark)))

  ;; (defun move-rect (x y)
  ;;   (interactive "P\nP")
  ;;   (put-point-top-left-corner)
  ;;   (kill-rectangle)
  ;;   (pic-move x y)
  ;;   (let ((oldp (point)))
  ;;     )


  ;;   )
  ;; ;;(setq kill-ring (cdr kill-ring)) ;;pop kill-ring

  ;; (move-rect 0 -1)


  (defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                                       :color pink
                                       :hint nil
                                       :post (progn (deactivate-mark) (whitespace-cleanup)))
    "
    ^_k_^       _w_ copy      _o_pen       _N_umber-lines            |\\     -,,,--,,_
  _h_   _l_     _y_ank        _t_ype       _e_xchange-point          /,`.-'`'   ..  \-;;,_
    ^_j_^       _d_ kill      _c_lear      _r_eset-region-mark      |,4-  ) )_   .;.(  `'-'
  ^^^^          _u_ndo        _q_ quit     ^ ^                     '---''(./..)-'(_\_)
  "
    ("k" (pic-move 0 -1))
    ("j" (pic-move 0 1))
    ("h" (pic-move -1 0))
    ("l" (pic-move 1 0))
    ("d" kill-rectangle)                    ;; C-x r k
    ("y" yank-rectangle)                    ;; C-x r y
    ("w" copy-rectangle-as-kill)            ;; C-x r M-w
    ("o" open-rectangle)                    ;; C-x r o
    ("t" string-rectangle)                  ;; C-x r t
    ("c" clear-rectangle)                   ;; C-x r c
    ("e" exchange-point-and-mark)           ;; C-x C-x
    ("N" rectangle-number-lines)            ;; C-x r N
    ("r" (if (region-active-p)
             (deactivate-mark)
           (rectangle-mark-mode 1)))
    ("u" undo nil)
    ("q" nil nil))
  (define-key my-keys-map (kbd "C-x SPC") 'hydra-rectangle/body)
#+end_src
* dashboard
#+begin_src emacs-lisp :tangle yes
  (require 'dashboard)
  (dashboard-setup-startup-hook)

  (setq dashboard-items '((recents  . 5)
                          (bookmarks . 5)
                          (projects . 5)))
#+end_src
* eriks smart delete stuff o copy o stuff
#+begin_src emacs-lisp :tangle yes
  (defun eriks-delete-backward ()
    (interactive)
    (let ((c (preceding-char)))
      (if (is-boundary c)
          (hungry-delete-backward 1)
        (sp-backward-delete-word 1))))

  (defun eriks-delete-forward ()
    (interactive)
    (let ((c (following-char)))
      (if (is-boundary c)
          (hungry-delete-forward 1)
        (sp-delete-word 1))))

  (defun eriks-delete-forward-symbol ()
    (interactive)
    (let ((c (following-char)))
      (if (is-boundary c)
          (hungry-delete-forward 1)
        (sp-delete-symbol 1))))

  (defun eriks-delete-backward-symbol ()
    (interactive)
    (let ((c (preceding-char)))
      (if (is-boundary c)
          (hungry-delete-backward 1)
        (sp-backward-delete-symbol 1))))

  (define-key my-keys-map (kbd "C-<backspace>") 'eriks-delete-backward)
  (define-key my-keys-map (kbd "C-<delete>") 'eriks-delete-forward)

  (defun eriks-duplicate-line ()
    (interactive)
    (let* (
           (b (progn
                (beginning-of-line)
                (point)))
           (e (progn
                (end-of-line)
                (point)))
           (line (buffer-substring b e)))
      (end-of-line)
      (newline)
      (insert line)))

  (defun eriks-find-char (ARG c)
    "Like vim's f-command. 

  With no prefix argument or as 1, move cursor forward until the first occurence of c.
  With ARG as -1 (M--), move backward until the first occurence of c.
  If c can't be found, do nothing and print a nice message.

  Ignores case!"
    (interactive "p\ncJump to char: ")
    (let ((start (point))
          (finished nil))
      (while (and
              (not (or (eobp) (bobp)))
              (not finished))
        (forward-char ARG)
        (if (= (downcase c) (downcase (following-char)))
            (setq finished t)))
      (if (not finished)
          (progn
            (goto-char start)
            (message "Couldn't find '%c' :(" c)))))

  (defun eriks-find-char-cur (ARG)
    "Exactly the same as eriks-find-char, except this uses the current char under point instead of prompting for one."
    (interactive "p")
    (eriks-find-char ARG (following-char)))
#+end_src
* modalka
#+begin_src emacs-lisp :tangle yes
  (require 'modalka)

  ;;(defvar-local mode-line-cookie nil)

  ;; (add-hook 'modalka-mode-hook
  ;;           (lambda ()
  ;;             (if (bound-and-true-p modalka-mode)
  ;;                 (setq-local mode-line-cookie
  ;;                             (face-remap-add-relative
  ;;                              'mode-line '((:background "#d2691e") mode-line)))
  ;;               (face-remap-remove-relative mode-line-cookie))
  ;;             ;;(powerline-reset)
  ;;             ))

  (defun toggle-modalka ()
    (interactive)
    (modalka-mode 'toggle))

  (define-key my-keys-map (kbd "§") 'toggle-modalka)

  ;; (modalka-global-mode)

  (define-key modalka-mode-map (kbd "t") 'hydra-transpose/body)

  (modalka-define-kbd "w" "C-w")
  (modalka-define-kbd "W" "M-w")
  (modalka-define-kbd "a" "C-a")
  (modalka-define-kbd "e" "C-e")
  ;;(modalka-define-kbd "g" "C-g")
  (modalka-define-kbd "y" "C-y")
  (modalka-define-kbd "Y" "M-y")
  (modalka-define-kbd "m" "<C-m>")
  (modalka-define-kbd "M" "C-M-SPC")

  (modalka-define-kbd ";" "M-;")

  (define-key modalka-mode-map (kbd "c") 'eriks-duplicate-line)

  ;;vim
  (modalka-define-kbd "h" "C-b")
  (modalka-define-kbd "k" "C-p")
  (modalka-define-kbd "j" "C-n")
  (modalka-define-kbd "l" "C-f")

  (modalka-define-kbd "H" "C-M-b")
  (modalka-define-kbd "K" "C-M-u")
  (modalka-define-kbd "J" "C-M-d")
  (modalka-define-kbd "L" "C-M-f")

  (modalka-define-kbd "f" "M-f")
  (modalka-define-kbd "b" "M-b")
  (define-key modalka-mode-map "F" 'forward-symbol)
  (define-key modalka-mode-map "B" 'backward-symbol)

  (modalka-define-kbd               "d d" "C-k")
  (modalka-define-kbd               "d D" "C-M-k")
  (modalka-define-kbd               "d f" "C-<delete>")
  (modalka-define-kbd               "d b" "C-<backspace>")
  (define-key modalka-mode-map (kbd "d F") 'eriks-delete-forward-symbol)
  (define-key modalka-mode-map (kbd "d B") 'eriks-delete-backward-symbol)
  (define-key modalka-mode-map (kbd "d l") 'eriks-kill-line)
  (define-key modalka-mode-map (kbd "d r") 'delete-region)



  (define-key modalka-mode-map (kbd ".") 'repeat)
  ;;(define-key modalka-mode-map (kbd "SPC") 'eriks-map)
  (define-key modalka-mode-map (kbd "SPC") 'self-insert-command)
  (define-key modalka-mode-map (kbd "i") 'toggle-modalka)

  (modalka-define-kbd "o" "C-<return>")
  (modalka-define-kbd "O" "C-S-<return>")
  (modalka-define-kbd "+" "C-+")
  (define-key modalka-mode-map (kbd "p") 'hydra-smartparens/body)

  (modalka-define-kbd "s" "C-s")
  (define-key modalka-mode-map (kbd "S") 'swiper-selection)

  (modalka-define-kbd "v" "C-v")
  (modalka-define-kbd "V" "M-v")

  (modalka-define-kbd "r" "C-r")
  (modalka-define-kbd "x" "<deletechar>")
  (modalka-define-kbd "X" "DEL")

  ;;avy
  (define-key modalka-mode-map (kbd "g g") 'avy-goto-char)
  (define-key modalka-mode-map (kbd "g l") 'avy-goto-line)
  (define-key modalka-mode-map (kbd "g w") 'avy-goto-word-0)
  (define-key modalka-mode-map (kbd "g n") 'goto-line)
  (define-key modalka-mode-map (kbd "g a") 'beginning-of-buffer)
  (define-key modalka-mode-map (kbd "g e") 'end-of-buffer)

  (modalka-define-kbd "q" "C-q")

  (define-key modalka-mode-map (kbd "ö") 'hydra-windows/body)

  (modalka-define-kbd "<left>" "")
  (modalka-define-kbd "<right>" "")
  (modalka-define-kbd "<down>" "")
  (modalka-define-kbd "<up>" "")

  (dotimes (i 10)
    (modalka-define-kbd (format "%d" i) (format "M-%d" i)))

  (modalka-define-kbd "-" "M--")
  (define-key modalka-mode-map (kbd ",") 'repeat-complex-command)

  (defun swiper-selection ()
    (interactive)
    (deactivate-mark)
    (swiper (buffer-substring (point) (mark))))

  (define-key modalka-mode-map (kbd "n") 'eriks-find-char)
  (define-key modalka-mode-map (kbd "N") 'eriks-find-char-cur)

  ;;altgr
  ;; (define-key modalka-mode-map (kbd "7")
  ;;   (lambda ()
  ;;     (interactive)
  ;;     (insert-char 123) ;;{}
  ;;     (run-hooks 'post-self-insert-hook)))

  ;; (define-key modalka-mode-map (kbd "8")
  ;;   (lambda ()
  ;;     (interactive)
  ;;     (insert-char 91) ;;[]
  ;;     (run-hooks 'post-self-insert-hook)))
#+end_src
* hide minor mode lighters in modeline
#+begin_src emacs-lisp :tangle yes
  ;;shorten minor mode

  (add-hook 'autopair-mode-hook
            (lambda ()
              (diminish 'autopair-mode)))

  (diminish 'which-key-mode)
  (diminish 'ivy-mode)
  (diminish 'undo-tree-mode)
  (diminish 'auto-complete-mode)
  (diminish 'yas-minor-mode)
  (diminish 'global-disable-mouse-mode)

  ;;rm-text-properties, ta bort sakerna som smart-mode-line lägger till (face och sml/global(?)).
  (diminish 'modalka-mode (format " %s" (propertize (all-the-icons-fileicon "emacs")
                                                    'face `(:family ,(all-the-icons-fileicon-family) :height 0.8 :foreground "cyan")
                                                    'display '(raise -0.1)
                                                    )))

  (diminish 'my-keys-minor-mode (format " %s" (propertize (all-the-icons-faicon "keyboard-o")
                                                          'face `(:family ,(all-the-icons-faicon-family) :height 0.9)
                                                          'display '(raise 0.0)
                                                          )))

  (diminish 'smartparens-mode)

  (diminish 'projectile-mode)
  (diminish 'all-the-icons-dired-mode)

  ;; (add-hook 'smartparens-mode-hook
  ;;           (lambda ()
  ;;             (diminish 'smartparens-mode)))

  ;;doesnt run :(
  (add-hook 'abbrev-mode-hook
            (lambda ()
              (diminish 'abbrev-mode)))
#+end_src
